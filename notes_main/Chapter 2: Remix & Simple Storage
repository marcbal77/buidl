(02:01:16) Lesson 2: Welcome to Remix! Simple Storage

           (02:05:17): Setting Up Your first Contract

           (02:12:29): Basic Solidity - Types

           (02:18:42): Basic Solidity - Functions

Any time you deploy or change something on-chain, including making a new contract, it happens in a transaction.

Deploying a contract is modifying the blockchain to have the deployed contract and modifying the state of the blockchain.

The remix fake accounts will simulate locally a transaction

Visibility

Function Visibility: Solidity knows two kinds of function calls: external ones that do create an actual EVM message call and internal ones that do not. Furthermore, internal functions can be made inaccessible to derived contracts. This gives rise to four types of visibility for functions. 

NOTE: When you do NOT give a visibility to functions or variables they automatically get deployed as internal.

``external`` 

``public`` Public functions are part of the contract interface and can be either called internally or via message calls. Essentially, a getter function is created to return the function which is being made “public.”

``internal`` Internal functions can only be accessed from within the current contract or contracts deriving from it. They cannot be accessed externally. Since they are not exposed to the outside through the contract’s ABI, they can take parameters of internal types like mappings or storage references. Contracts derived from a current contract are often called children contracts.

``private`` This is constraining a function to a contract, so that only the contract specified with visibility of private can utilize that function. Private functions are like internal ones but they are not visible in derived contracts.

Note: Making something private or internal only prevents other contracts from reading or modifying the information, but it will still be visible to the whole world outside of the blockchain.

Gas Example, the more stuff you do, the more computation required, then the more gas that you’re going to cost to execute a transaction.

Scope: Often refer to what are inside the curly brackets.

    // keywords view and pure notate a function that doesn't have to spend gas to run - when called alone, they do not cost gas
    // view or pure functions disallow any modification of state

If a gas calling function calls a view or pure function that is the only time it will cost gas

           (02:35:30): Basic Solidity - Arrays & Structs

In Solidity, a struct is a custom data type that allows you to group together multiple variables under a single type. It's similar to structures in other programming languages like C or C++. Structs are particularly useful for organizing complex data in a readable and manageable wa

1. Struct Declaration: Declares the structure of the data type.
2. State Variables: Structs can be used as state variables in a contract.
3. Arrays and Mappings: Structs can be stored in arrays or mappings for more complex data storage.
4. Memory vs Storage: When passing structs within functions, you need to specify if they are in memory or storage. memory is temporary and storage is persistent.

Arrays: a way to store a list or sequence of objects 

Dynamic array: size of the array isn’t given at the array initialization. The size of an array can grow and shrink as values are added and subtracted.

           (02:45:34): Basic Solidity - Errors & Warnings

           (02:46:35): Basic Solidity - Memory, Storage & Calldata(Intro)

Layout of State Variables in Storage
State variables of contracts are stored in storage in a compact way such that multiple values sometimes use the same storage slot. Except for dynamically-sized arrays and mappings (see below), data is stored contiguously item after item starting with the first state variable, which is stored in slot 0. For each variable, a size in bytes is determined according to its type. Multiple, contiguous items that need less than 32 bytes are packed into a single storage slot if possible, according to the following rules:

The first item in a storage slot is stored lower-order aligned.

Value types use only as many bytes as are necessary to store them.

If a value type does not fit the remaining part of a storage slot, it is stored in the next storage slot.

Structs and array data always start a new slot and their items are packed tightly according to these rules.

Items following struct or array data always start a new storage slot.

For contracts that use inheritance, the ordering of state variables is determined by the C3-linearized order of contracts starting with the most base-ward contract. If allowed by the above rules, state variables from different contracts do share the same storage slot.